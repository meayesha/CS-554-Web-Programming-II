{"ast":null,"code":"var _jsxFileName = \"/Users/ayeshaparveen/Desktop/Workspace/lab_4_marvel_new/src/components/CharacterInfo.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst CharacterInfo = props => {\n  _s();\n\n  const md5 = require('blueimp-md5');\n\n  const publickey = 'b3f3ae85c881c6196c303b96f1678274';\n  const privatekey = 'b82cf5047defc8b4ca20fd4bd5338432c0fe5739';\n  const ts = new Date().getTime();\n  const stringToHash = ts + privatekey + publickey;\n  const hash = md5(stringToHash);\n  const [characterId, setCharacterId] = useState(undefined);\n  const [characterInfo, setCharacterInfo] = useState(undefined);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    setCharacterId(parseInt(props.match.params.id));\n\n    async function fetchData() {\n      try {\n        const {\n          data\n        } = await axios.get(`https://gateway.marvel.com:443/v1/public/characters/${props.match.params.id}` + '?ts=' + ts + '&apikey=' + publickey + '&hash=' + hash);\n        setCharacterInfo(data);\n        setLoading(false);\n        console.log('param is' + characterId);\n        console.log(data);\n      } catch (e) {\n        console.log(e);\n      }\n    }\n\n    fetchData();\n  }, [props.match.params.id]);\n\n  let characterData = /*#__PURE__*/_jsxDEV(\"div\", {\n    children: characterInfo && characterInfo.data.results.map((character, index) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"id: \", character.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n          children: [\"name: \", character.name]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"description: \", character.description]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"modified: \", character.modified]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"thumbnail: \", character.thumbnail]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"resourceURI: \", character.resourceURI]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"comics: \", character.comics]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"series: \", character.series]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"stories : \", character.stories]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"events : \", character.events]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"urls : \", character.urls]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Loading .....\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 17\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: characterData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this);\n  }\n};\n\n_s(CharacterInfo, \"6eUa45F2X8Cdf7v+AQNLh96ziHo=\");\n\n_c = CharacterInfo;\nexport default CharacterInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"CharacterInfo\");","map":{"version":3,"sources":["/Users/ayeshaparveen/Desktop/Workspace/lab_4_marvel_new/src/components/CharacterInfo.js"],"names":["React","useState","useEffect","axios","CharacterInfo","props","md5","require","publickey","privatekey","ts","Date","getTime","stringToHash","hash","characterId","setCharacterId","undefined","characterInfo","setCharacterInfo","loading","setLoading","parseInt","match","params","id","fetchData","data","get","console","log","e","characterData","results","map","character","index","name","description","modified","thumbnail","resourceURI","comics","series","stories","events","urls"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst CharacterInfo = (props) => {\n    const md5 = require('blueimp-md5');\n    const publickey = 'b3f3ae85c881c6196c303b96f1678274';\n    const privatekey = 'b82cf5047defc8b4ca20fd4bd5338432c0fe5739';\n    const ts = new Date().getTime();\n    const stringToHash = ts + privatekey + publickey;\n    const hash = md5(stringToHash);\n    const [characterId, setCharacterId] = useState(undefined);\n    const [characterInfo, setCharacterInfo] = useState(undefined);\n    const [loading, setLoading] = useState(true);\n\n    useEffect(\n        () => {\n\n            setCharacterId(parseInt(props.match.params.id));\n            async function fetchData() {\n                try {\n                    const { data } = await axios.get(`https://gateway.marvel.com:443/v1/public/characters/${props.match.params.id}` + '?ts=' + ts + '&apikey=' + publickey + '&hash=' + hash);\n                    setCharacterInfo(data);\n                    setLoading(false);\n                    console.log('param is' + characterId);\n                    console.log(data);\n                } catch (e) {\n                    console.log(e);\n                }\n\n            }\n            fetchData();\n        }, [props.match.params.id]\n    );\n\n    let characterData =(\n    <div>\n        {characterInfo && characterInfo.data.results.map((character, index)=>{\n            return (\n                <div>\n                <h1>id: {character.id}</h1>\n                <h1>name: {character.name}</h1>\n                <h2>description: {character.description}</h2>\n                <h2>modified: {character.modified}</h2>\n                <h2>thumbnail: {character.thumbnail}</h2>\n                <h2>resourceURI: {character.resourceURI}</h2>\n                <h2>comics: {character.comics}</h2>\n                <h2>series: {character.series}</h2>\n                <h2>stories : {character.stories}</h2>\n                <h2>events : {character.events}</h2>\n                <h2>urls : {character.urls}</h2>\n                 </div>\n            )\n        })}\n        </div>\n        )\n        if(loading){\n            return(\n                <div>\n                    <h2>Loading .....</h2>\n                </div>\n            )\n        }\n        else{\n            return(\n                <div>\n                    {characterData}\n                </div>\n            )\n        }\n    }\n    \n    export default CharacterInfo;\n"]},"metadata":{},"sourceType":"module"}
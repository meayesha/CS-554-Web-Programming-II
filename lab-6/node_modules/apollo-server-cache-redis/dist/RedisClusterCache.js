"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RedisClusterCache = void 0;
const ioredis_1 = __importDefault(require("ioredis"));
const BaseRedisCache_1 = require("./BaseRedisCache");
class RedisClusterCache extends BaseRedisCache_1.BaseRedisCache {
    constructor(nodes, options) {
        const clusterClient = new ioredis_1.default.Cluster(nodes, options);
        super({ noMgetClient: clusterClient });
        this.clusterClient = clusterClient;
    }
    flush() {
        return __awaiter(this, void 0, void 0, function* () {
            const masters = this.clusterClient.nodes('master') || [];
            yield Promise.all(masters.map((node) => node.flushdb()));
        });
    }
}
exports.RedisClusterCache = RedisClusterCache;
//# sourceMappingURL=RedisClusterCache.js.map